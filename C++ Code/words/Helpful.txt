https://stackoverflow.com/questions/5865303/how-can-i-make-find-work-with-a-set-of-structs
https://stackoverflow.com/questions/56622358/need-help-comparing-an-array-that-is-part-of-a-class

 #include <iostream>
#include <string>
#include <unistd.h>
#include <bits/stdc++.h>

using namespace std;

struct WordInfo {
string text;
int count;
};

template <class T>
class MyVector {
public:
typedef T* iterator; // creates an alias of the T* type called iterator
MyVector() { }

T& operator[](int i) {
return items[i];
}
iterator begin() {
return &items[0];
}
iterator end() {
return &items[used];
}
int size() {
return used;
}
iterator insert (iterator position, const T& item) {
for (MyVector<T>::iterator i = &items[998]; i >= position; i--) {
*i = *(i - 1);
}
*position = item;
++used;
return position;
}
private:
T items[1000];
int used = 0;
};

int main(int argc, char** argv) {

enum {
total,
unique,
individual
} mode = total;

for (int c; (c = getopt(argc, argv, "tui")) != -1;) {
switch (c) {
case 't':
mode = total;
break;
case 'u':
mode = unique;
break;
case 'i':
mode = individual;
break;
}
}
argc -= optind;
argv += optind;

string word;
int count = 0;
vector <WordInfo>words;

while (cin >> word) {
count ++;
int duplicate = 0;
for (int i = 0; i < words.size(); i++) {
if (words[i].text == word) {
duplicate = 1;
words[i].count += 1;
}
}
if (!duplicate) {
WordInfo newWord;
newWord.text = word;
newWord.count = 1;
words.push_back(newWord);
}
}

switch (mode) {

case total:

cout << "Total: " << count << '\n';
break;

case unique:

cout << "Unique: " << words.size() << '\n';
break;
case individual:
int size = words.size();
for (int i = 0; i < size; i++) {
for (int j = i + 1; j < size; j++) {
if (words[i].text > words[j].text) {
WordInfo temp = words[i];
words[i] = words[j];
words[j] = temp;
}
}
}
for (int i = 0; i < size; i++) {

cout <<words[i].text << ": " << words[i].count << endl;
}
break;
}

return 0;
}
