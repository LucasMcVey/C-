//
// COMP2711,8801 Computer Programming 2
// Flinders University
//

#include <iostream>
#include <string>
#include <unistd.h>

#include "Rolodex.h"


using namespace std;

auto verbose      = false; // Log Rolodex actions
auto printCurrent = false; // Output only the current Rolodex card
auto duplicates = true;
auto report = false;

int countRotateBackwards = 0;
int countRotateForwards = 0;
int countInsert = 0;
int countDuplicate = 0;
int countDelete = 0;


void rolodex()
{

    string word;
    Rolodex rolodex;
    while (cin >> word) {
        bool delete_ = false;
        switch (word.at(0)) {
            case '-':
                delete_ = true;
                word.erase(0,1);
                break;
        }
        if (word.length() == 0)
            continue;

        if (rolodex.isBeforeFirst() || rolodex.currentValue() <= word) {
            while (!rolodex.isAfterLast() && rolodex.currentValue() < word) {
                rolodex.rotateForward();
                countRotateForwards++;
                if (verbose)
                    cerr << "rotateForward\n";
            }
            if (delete_) {
                if (!rolodex.isAfterLast() && rolodex.currentValue() == word) {
                    rolodex.delete_current();
                    countDelete++;
                    if (verbose)
                        cerr << "delete (backward)\n";
                }
            }

            else if ( rolodex.isAfterLast() || rolodex.currentValue() != word) {
                rolodex.insertBeforeCurrent(word);
                countInsert++;

                if (verbose)
                    cerr << "insertBeforeCurrent\n";
            }
           else if (rolodex.isBeforeFirst() || rolodex.currentValue() == word) {
                rolodex.insertBeforeCurrent(word);
                countInsert++;
                countDuplicate++;
                if (verbose)
                    cerr << "rotateForward\n";
            }
        }


        else if (rolodex.isAfterLast() || rolodex.currentValue() >= word) {
            while (!rolodex.isBeforeFirst() && rolodex.currentValue() > word) {
                rolodex.rotateBackward();
                countRotateBackwards++;
                if (verbose)
                    cerr << "rotateBackward\n";
            }
            if (delete_) {
                if (!rolodex.isBeforeFirst() && rolodex.currentValue() == word) {
                    rolodex.delete_current();
                    countDelete++;
                    if (verbose)
                        cerr << "delete (backward)\n";
                }
            }
            else if ( rolodex.isBeforeFirst() || rolodex.currentValue() != word) {
                rolodex.insertAfterCurrent(word);
                countInsert++;
                if (verbose)
                    cerr << "insertAfterCurrent\n";
            }
            if (rolodex.isBeforeFirst() && rolodex.currentValue() < word) {
                rolodex.insertBeforeCurrent(word);
                countInsert++;
                countDuplicate++;
                if (verbose)
                    cerr << "rotateForward\n";
            }

        }
    }
    if (report) {
        cout << countInsert << " " << countDuplicate << " " << countDelete << " " << countRotateForwards << " " << countRotateBackwards << endl;
        return;
    }

    if (printCurrent) {
        cout << rolodex.currentValue() << '\n';
    }

    else { // Output all Rolodex card values (default)
        while (!rolodex.isBeforeFirst()) {
            rolodex.rotateBackward();
        }
        rolodex.rotateForward(); // Go to the first card
        while (!rolodex.isAfterLast()) {
            cout << rolodex.currentValue() << '\n';
            rolodex.rotateForward();
        }
    }
}

int main(int argc, char** argv)
{
    int c;
    while ((c = getopt(argc, argv, "dvcr")) != EOF) {
        switch (c) {
        case 'd':
            duplicates=false;
            break;
        case 'v':
            verbose = true;
            break;
        case 'c':
            printCurrent = true;
            break;
        case 'r':
            report = true;
            break;
        }
    }
    argc -= optind;
    argv += optind;
    rolodex();
    return 0;
}
